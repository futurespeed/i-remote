
#include <lvgl.h>


#ifndef LV_ATTRIBUTE_MEM_ALIGN
#define LV_ATTRIBUTE_MEM_ALIGN
#endif

#ifndef LV_ATTRIBUTE_IMG_IMG_LEARNING
#define LV_ATTRIBUTE_IMG_IMG_LEARNING
#endif

const LV_ATTRIBUTE_MEM_ALIGN LV_ATTRIBUTE_LARGE_CONST LV_ATTRIBUTE_IMG_IMG_LEARNING uint8_t img_learning_map[] = {
  0xdb, 0xdb, 0xdb, 0xff, 	/*Color of index 0*/
  0x80, 0x80, 0x80, 0xff, 	/*Color of index 1*/
  0x3c, 0x3c, 0x3c, 0xff, 	/*Color of index 2*/
  0x01, 0x01, 0x01, 0xff, 	/*Color of index 3*/

  0xff, 0xff, 0xff, 0x45, 0x55, 0x55, 0x05, 0x55, 0x55, 0x1f, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfd, 0x01, 0x55, 0x55, 0x55, 0x55, 0x04, 0x07, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfc, 0x19, 0xff, 0xff, 0xff, 0xe1, 0xb5, 0xc2, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xf4, 0x1d, 0x7f, 0xff, 0xf8, 0x5f, 0xd7, 0xd1, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xe0, 0x9f, 0x5f, 0xfe, 0x47, 0xff, 0x5f, 0xf0, 0xbf, 0xff, 0xf0, 
  0xff, 0xff, 0xc1, 0x9f, 0xd7, 0x91, 0xbf, 0xfd, 0x7f, 0xf4, 0x3f, 0xff, 0xf0, 
  0xff, 0xff, 0x83, 0x9f, 0xf0, 0x6f, 0xff, 0xf5, 0xff, 0xfc, 0x1f, 0xff, 0xf0, 
  0xff, 0xff, 0x0b, 0x9e, 0x15, 0xbf, 0xff, 0xd7, 0xff, 0xfe, 0x0f, 0xff, 0xf0, 
  0xff, 0xfd, 0x0f, 0x41, 0xff, 0x2f, 0xff, 0x9f, 0xff, 0xff, 0x47, 0xff, 0xf0, 
  0xff, 0xfc, 0x24, 0x5f, 0xff, 0xcb, 0xfe, 0x3f, 0xff, 0xff, 0x82, 0xff, 0xf0, 
  0xff, 0xf0, 0x1b, 0x9f, 0xff, 0xf2, 0xf8, 0xff, 0xff, 0xff, 0xd0, 0xbf, 0xf0, 
  0xff, 0xe0, 0x3f, 0x9f, 0xff, 0xfc, 0xa3, 0xff, 0xff, 0xff, 0xe0, 0x7f, 0xf0, 
  0xff, 0xc1, 0x6f, 0x9f, 0xff, 0xff, 0x1b, 0xff, 0xff, 0xff, 0xc4, 0x3f, 0xf0, 
  0xff, 0x83, 0xdb, 0x9f, 0xff, 0xff, 0x0f, 0xff, 0xff, 0xff, 0x64, 0x1f, 0xf0, 
  0xff, 0x0b, 0xf6, 0x9f, 0xff, 0xfc, 0xe3, 0xff, 0xff, 0xfd, 0x72, 0x0f, 0xf0, 
  0xfd, 0x0f, 0xfd, 0x5f, 0xff, 0xf2, 0xfc, 0xff, 0xff, 0xf2, 0xf7, 0x47, 0xf0, 
  0xfc, 0x2f, 0xff, 0x5f, 0xff, 0xcf, 0xfe, 0x6f, 0xff, 0xdb, 0xe7, 0x82, 0xf0, 
  0xf0, 0x7f, 0xff, 0x8b, 0xfe, 0x6f, 0xff, 0x9f, 0xff, 0x5f, 0xdb, 0xd1, 0xf0, 
  0xe0, 0xff, 0xff, 0x96, 0xfd, 0x7f, 0xff, 0xe3, 0xfd, 0x7f, 0xdf, 0xf0, 0xb0, 
  0xc1, 0xff, 0xff, 0x9d, 0xb2, 0xff, 0xff, 0xf9, 0xf5, 0xff, 0xcf, 0xf4, 0x30, 
  0x03, 0xff, 0xff, 0x9f, 0x57, 0xff, 0xff, 0xfd, 0x57, 0xff, 0xdf, 0xfc, 0x00, 
  0x03, 0xff, 0xff, 0x9f, 0x4f, 0xff, 0xff, 0xff, 0x4f, 0xff, 0x9f, 0xfc, 0x00, 
  0xc1, 0xff, 0xff, 0x9d, 0x73, 0xff, 0xff, 0xfd, 0x57, 0xff, 0x6f, 0xf4, 0x30, 
  0xe0, 0xff, 0xff, 0x95, 0xfc, 0xff, 0xff, 0xf5, 0xf5, 0xff, 0x3f, 0xf0, 0xb0, 
  0xf4, 0x7f, 0xff, 0x87, 0xff, 0x3f, 0xff, 0xe7, 0xfd, 0xbf, 0x7f, 0xd0, 0xf0, 
  0xf8, 0x2f, 0xff, 0x5f, 0xff, 0xcf, 0xff, 0x8f, 0xff, 0x2e, 0x7f, 0x83, 0xf0, 
  0xfd, 0x1f, 0xfe, 0x1f, 0xff, 0xf3, 0xfe, 0x3f, 0xff, 0xda, 0x7f, 0x47, 0xf0, 
  0xff, 0x0b, 0xf8, 0x9f, 0xff, 0xf9, 0xf9, 0xff, 0xff, 0xf0, 0xfe, 0x0f, 0xf0, 
  0xff, 0x83, 0xe7, 0x9f, 0xff, 0xfe, 0x63, 0xff, 0xff, 0xfc, 0xbc, 0x1f, 0xf0, 
  0xff, 0xc1, 0xcb, 0x9f, 0xff, 0xff, 0x4f, 0xff, 0xff, 0xfc, 0x34, 0x3f, 0xf0, 
  0xff, 0xe0, 0x3f, 0x9f, 0xff, 0xfe, 0x56, 0xff, 0xff, 0xf9, 0xc0, 0xbf, 0xf0, 
  0xff, 0xf0, 0x11, 0x01, 0x11, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 
  0xff, 0xf4, 0x2f, 0x9f, 0xff, 0xe6, 0xfe, 0x7f, 0xff, 0xf6, 0xc1, 0xff, 0xf0, 
  0xff, 0xfd, 0x1f, 0x9f, 0xff, 0xcb, 0xff, 0x9f, 0xff, 0xf3, 0x07, 0xff, 0xf0, 
  0xff, 0xff, 0x0b, 0x9f, 0xff, 0x3f, 0xff, 0xd7, 0xff, 0xf6, 0x0f, 0xff, 0xf0, 
  0xff, 0xff, 0x43, 0x9f, 0xfc, 0xbf, 0xff, 0xf5, 0xff, 0xe4, 0x2f, 0xff, 0xf0, 
  0xff, 0xff, 0xc1, 0x9f, 0xf2, 0xff, 0xff, 0xfd, 0x7f, 0xd4, 0x3f, 0xff, 0xf0, 
  0xff, 0xff, 0xe0, 0x9f, 0xcb, 0xff, 0xff, 0xff, 0x5f, 0xc0, 0xbf, 0xff, 0xf0, 
  0xff, 0xff, 0xf4, 0x1f, 0x2f, 0xff, 0xff, 0xff, 0xd7, 0xc0, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xf8, 0x1d, 0xbf, 0xff, 0xff, 0xff, 0xf6, 0x83, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfd, 0x04, 0x66, 0x66, 0x56, 0x66, 0x64, 0x07, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xff, 0xff, 0xf0, 
  0xff, 0xff, 0xff, 0x45, 0x55, 0x55, 0x05, 0x55, 0x55, 0x1f, 0xff, 0xff, 0xf0, 
};

const lv_img_header_t img_learning_header = {
  .cf = LV_IMG_CF_INDEXED_2BIT,
  .always_zero = 0,
  .reserved = 0,
  .w = 50,
  .h = 44
};

const lv_img_dsc_t img_learning = {
  // .header.cf = LV_IMG_CF_INDEXED_2BIT,
  // .header.always_zero = 0,
  // .header.reserved = 0,
  // .header.w = 50,
  // .header.h = 44,
  .header = img_learning_header,
  .data_size = 588,
  .data = img_learning_map
};